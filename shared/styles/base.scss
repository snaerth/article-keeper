/***
*  This file is imported in components/app-layout/AppLayout.scss
*/
@import './variables';
@import './mixins';

@-ms-viewport {
  width: device-width;
}

@-o-viewport {
  width: device-width;
}

@viewport {
  width: device-width;
}

// inherited from <html>
*,
*::after,
*::before {
  box-sizing: inherit;
}

* {
  box-sizing: border-box;
}

// stylelint-disable-next-line
body,
html {
  min-height: 100vh;
}

html {
  -webkit-overflow-scrolling: touch;
  overflow-x: hidden;
  overflow-y: scroll;
}

body {
  position: relative;
  margin: 0;
  font-family: 'Open Sans', arial, sans-serif;
  font-size: 16px;
  line-height: 1.5;
  letter-spacing: 0.5px;
  color: $primary-text-color; // iOS on orientation change
  background: $primary-background;
  text-size-adjust: 100%;
  text-rendering: optimizeLegibility;
  -webkit-font-smoothing: antialiased;
}

img {
  display: block;
  max-width: 100%;
  height: auto;
}

h1 {
  @include responsive-font(10vw, 40px, 60px);

  line-height: 1.2;
  color: $primary-text-color;
}

h1,
h2,
h3,
h4,
h5,
h6 {
  line-height: 1.2;
  color: $primary-text-color;
}

ul {
  padding: 0;
  list-style-type: none;
}

a {
  color: $primary-color;

  &:hover {
    transition: color $hover-transition ease-out;
  }
}

fieldset {
  margin-bottom: 10px;
  border: 0;

  @include viewport(handset) {
    padding: 0;
  }
}

/*
Visually hide an element
------------------------------------------------------------------
When you hide an element with display: none, that prevents
screen readers from reading it to the user. Sometimes thatâ€™s fine,
but in other cases this will make the site hard to use for people
with screen readers. Thus, we have to use another technique for
hiding elements while at the same time make them accessible.
In this example, we are using the Sass placeholder selector since
the output will always be the same, which enables us to reduce
repetetive code in the output.
*/
.visually-hidden {
  position: absolute;
  margin: -1px;
  padding: 0;
  width: 1px;
  height: 1px;
  overflow: hidden;
  clip: rect(0 0 0 0);
  clip: rect(0, 0, 0, 0);
}

// placeholders
input,
select,
textarea {
  // stylelint-disable-line
  &:-webkit-input-placeholder {
    color: $color-placeholder;
  }

  &:-moz-placeholder {
    opacity: 1;
    color: $color-placeholder;
  }

  &:-ms-input-placeholder {
    color: $color-placeholder;
  }
}

input:-webkit-autofill {
  box-shadow: 0 0 0 1000px #fff inset;
}

.noPadding {
  padding: 0;
}

// Navigation
nav .active {
  color: $primary-black;
  border-bottom: 1px solid $primary-black;
}

// Banner
.banner {
  padding: 40px 0;
  background: $primary-color;

  h1 {
    margin: 0;
    color: $primary-white;
  }
}

// Almost hidden
.almostHidden {
  opacity: 0.6;
  pointer-events: none;
}

// Native HTML5 input date
input[type='date']::-webkit-calendar-picker-indicator,
input[type='date']::-webkit-inner-spin-button,
input[type='date']::-webkit-search-cancel-button {
  display: none;
  -webkit-appearance: none;
}

// Checkbox readonly
input[type='checkbox'][readonly] {
  pointer-events: none;
}
