/*
Animations and keyframes
-------------------------------------------------------------------
Animations are always a pain to create with all the vendor prefixes
and what not. But with the help of this mixin it will boil down to
ust a few lines of code.
*/
@mixin keyframes($animation-name) {
  @keyframes #{$animation-name} {
    @content;
  }
}

@mixin animation($str) {
  animation: #{$str};
}

/*
Usage
--------------------------------
@include keyframes(slide-down) {
  0% { opacity: 1; }
  90% { opacity: 0; }
}

.element {
  width: 100px;
  height: 100px;
  background: black;
  @include animation('slide-down 5s 3');
}
*/

///
/// Viewport sized typography with minimum and maximum values
///
/// @author Eduardo Boucas (@eduardoboucas)
///
/// @param {Number}   $responsive  - Viewport-based size
/// @param {Number}   $min         - Minimum font size (px)
/// @param {Number}   $max         - Maximum font size (px)
///                                  (optional)
/// @param {Number}   $fallback    - Fallback for viewport-
///                                  based units (optional)
///
/// @example scss - 5vw font size (with 50px fallback), 
///                 minumum of 35px and maximum of 150px
///  @include responsive-font(5vw, 35px, 150px, 50px);
///
@mixin responsive-font($responsive, $min, $max: false, $fallback: false) {
  $responsive-unitless: $responsive / ($responsive - $responsive + 1);
  $dimension: if(unit($responsive) =='vh', 'height', 'width');
  $min-breakpoint: $min / $responsive-unitless * 100;
  @media (max-#{$dimension}: #{$min-breakpoint}) {
    font-size: $min;
  }
  @if $max {
    $max-breakpoint: $max / $responsive-unitless * 100;
    @media (min-#{$dimension}: #{$max-breakpoint}) {
      font-size: $max;
    }
  }
  @if $fallback {
    font-size: $fallback;
  }
  font-size: $responsive;
}

/*
Usage
---------------------------------------
@include responsive-font(5vw, 35px, 150px, 50px);
*/
@mixin fit {
  position: absolute;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
}
@function strip-unit($number) {
  @if type-of($number) == 'number' and not unitless($number) {
    @return $number / ($number * 0 + 1);
  }

  @return $number;
}
@mixin viewport($media) {
  @if $media == handset {
    @media only screen and (max-width: $min-600) {
      @content;
    }
  }
  @else if $media==tablet {
    @media only screen and (min-width: $min-tablet) {
      @content;
    }
  }
  @else if $media==desktop {
    @media only screen and (min-width: $min-desktop) {
      @content;
    }
  }
  /* stylelint-disable */
  @else if $media==retina {
     @media only screen and (-webkit-min-device-pixel-ratio: 1.3), only screen and (-o-min-device-pixel-ratio: 13/10), only screen and (min-resolution: 120dpi){
      @content;
    }
  }
  @else if $media==oldIE {
     @media screen and (-ms-high-contrast: active), (-ms-high-contrast: none){
      @content;
    }
  }
}

// segment customisable per-component / instance rather than being forced to work around defaults.
@mixin segment($padding-top: $segment-padding, $padding-bottom: $segment-padding, $padding-top-mobile: $segment-padding-mobile, $padding-bottom-mobile: $segment-padding-mobile) {
  padding-top: $padding-top-mobile;
  padding-bottom: $padding-bottom-mobile;
  @media (min-width: $min-tablet) {
    padding-top: percentage(strip-unit($padding-top)/strip-unit($limit));
    padding-bottom: percentage(strip-unit($padding-bottom)/strip-unit($limit));
  }
  @media (min-width: $limit) {
    padding-top: strip-unit($padding-top) * 1px;
    padding-bottom: strip-unit($padding-bottom) * 1px;
  }
}
@mixin container() {
  margin: 0 auto;
  padding: 0 $container-gutter-mobile;
  max-width: $page-width + $container-gutter-mobile * 1;
  @media (min-width: 340px) {
    max-width: $page-width + $container-gutter-mobile * 2;
  }
  @media (min-width: $min-tablet) {
    padding: 0 $container-gutter-tablet;
    max-width: $page-width + $container-gutter-tablet * 2;
  }
  @media (min-width: $min-desktop) {
    padding: 0 $container-gutter-desktop;
    max-width: $page-width + $container-gutter-desktop * 2;
  }
}
